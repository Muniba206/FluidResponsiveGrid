/*================================================================
                 Fluid Grid Styles 
================================================================*/

.container {
	position:relative;
	margin:0px auto;
	padding:0px; 
	min-width:16em; 
	max-width:60em;
	-webkit-transition: all .1s linear;
       -moz-transition: all .1s linear;
        -ms-transition: all .1s linear; 
	     -o-transition: all .1s linear;
            transition: all .1s linear;
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;
}

.gutterless { padding:0 10px; }
.grid-col { padding:10px; }
.gutterless .grid-col { padding:10px 0; }

/* 16px baseline (256px) s = small */
@media only screen and (min-width:16em) {
	/* 
		I debated with myself if I should use [class^="grid-"] instead of adding another class
		It is a bit heavier of a css request, but some could say the difference isn't a big issue
		With this approach the html markup has slightly increased if you have a lot of container rows though
	*/
	.grid-col {
		position:relative;
		float:left;
		width:100%;
		-webkit-box-sizing: border-box;
		   -moz-box-sizing: border-box;
		        box-sizing: border-box;
	}
	.s-1half .grid-col { width:50%; }
}

/* Max width should be fine as 48em because the next set up overwrites the prior styles */

/* 16px baseline (420px - 768px) s-w = small wide */
@media only screen and (min-width:30em) and (max-width:48em){
	.sw-1half .grid-col { width:50%; }
	.sw-1third .grid-col { width:33.333%; }
}

/* 16px baseline (768px) which is where we probably want to start thinking about the grid */
@media only screen and (min-width:48em){
	.container .grid-1  { width:8.333%; }
	.container .grid-2  { width:16.666%; }
	.container .grid-3  { width:25%; }
	.container .grid-4  { width:33.333%; }
	.container .grid-5  { width:41.666%; }
	.container .grid-6  { width:50%; }
	.container .grid-7  { width:58.333%; }
	.container .grid-8  { width:66.666%; }
	.container .grid-9  { width:75%; }
	.container .grid-10 { width:83.333%; }
	.container .grid-11 { width:91.666%; }
	.container .grid-12 { width:100%; }
}

/* 16px baseline (768px - 960px) m = medium */ 
@media only screen and (min-width:48em) and (max-width:60em){
	.m-1half .grid-col { width:50%; }
	.m-1third .grid-col { width:33.333%; }
	.m-1fourth .grid-col { width:25%; }
	
	.m-2thirds-left .grid-col { width:25%; }
	.m-2thirds-left .grid-col:nth-child(2n+1) { width:75%; }
	.m-2thirds-right .grid-col { width:25%; }
	.m-2thirds-right .grid-col:nth-child(2n) { width:75%; }
	
	.lt-ie9 .m-2thirds-left .grid-col,
	.lt-ie9 .m-2thirds-right .grid-col { width:50%; }
}

/* 16px baseline (960px - 1139px) m-w = medium wide which is approximate desktop minimal sizing*/ 
@media only screen and (min-width:60em) and (max-width:72em){
	/* ??? */
	/* Profit */
}

/* 16px baseline (1140px) l = large in case you want to handle 1140 or higher screens*/ 
@media only screen and (min-width:72em) {
	.container { max-width:72em; }
}
